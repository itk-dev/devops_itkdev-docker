#!/usr/bin/env bash
VERSION=3.0.0
set -o errexit -o errtrace -o noclobber -o nounset -o pipefail
IFS=$'\n\t'

function find_script_dir {
  local script=${BASH_SOURCE[0]}
  local script_dir=$(cd $(dirname "${script}") && pwd)
  if [ -L $script ]; then
    # Symlink detected.
    script_dir=$(dirname $(readlink $script));
  fi

  echo $script_dir
}

script_dir=$(find_script_dir)
script_path=$script_dir/$(basename "${BASH_SOURCE[0]}")

function self_update {
  project_dir=$(cd "$script_dir/.." && pwd)
  cd "$project_dir"
  if ! git diff --quiet; then
    (>&2 echo "${bold}Local changes in $project_dir.${normal} Not updating.")
    git diff --name-status
    exit 1
  fi

  # TODO: Should we use the master branch?
  branch=develop

  echo "${bold}Updating branch $branch …${normal}"

  git fetch
  git checkout "$branch"
  git pull

  echo "${bold}Done.${normal}"

  echo
  echo "Latest changes:"
  git log --format="%C(auto) %h %s" -10
}

function template_install {
  local force=0
  local list=0
  local name=""

  for var in "$@"
  do
    case "$var" in
      --force)
        force=1
        ;;
      --list)
        list=1
        ;;
      *)
        name="$var"
        ;;
    esac
  done

  local templates_dir=$script_dir/../templates
  local source_dir=$templates_dir/$name/
  local target_dir=$PWD

  if [ "$list" -eq 1 ]; then
    echo Templates:
    for name in $templates_dir/*; do
      echo "  $(basename $name)"
    done
    exit 0
  fi

  if [ -z "$name" ]; then
    (>&2 echo "${bold}Missing template name${normal}")
    exit 1
  fi
  if [ ! -d $source_dir ]; then
    (>&2 echo "${bold}Invalid template name: $name (use --list to show valid template names)${normal}")
    exit 1
  fi

  if [ "$force" -ne 1 ]; then
    if [ -e $target_dir/docker-compose.yml ]; then
      (>&2 echo "${bold}Target $target_dir/docker-compose.yml already exists (use --force to overwrite)${normal}")
      exit 1
    fi
    if [ -e $target_dir/.docker ]; then
      (>&2 echo "${bold}Target $target_dir/.docker already exists (use --force to overwrite)${normal}")
      exit 1
    fi
  fi

  read -p "Are you sure you want to install the $name template in $target_dir (y|N)? " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
     exit
  fi

  echo "${bold}Installing $name template${normal}"
  rsync --archive $source_dir $target_dir

  local project_name_default=$(basename $target_dir)

  # Help user set up a .env file
  if [ ! -e $target_dir/.env ]; then
    local project_name
    local domain
    read -p "Project name ($project_name_default)? " -e project_name
    if [ -z "$project_name" ]; then
      project_name=$project_name_default
    fi
    read -p "Domain (optional)? " -e domain
    cat > $target_dir/.env <<EOF
COMPOSE_PROJECT_NAME=$project_name
COMPOSE_DOMAIN=$domain
EOF
  else
cat <<EOF

${bold}Edit .env and make sure that COMPOSE_PROJECT_NAME and, optionally, COMPOSE_DOMAIN is set${normal}, e.g.

COMPOSE_PROJECT_NAME=$project_name_default
COMPOSE_DOMAIN=$project_name_default.local.itkdev.dk

EOF
  fi
}

bold=$(tput bold)
normal=$(tput sgr0)

function usage {
  cat <<'EOF'
Usage: itkdev-docker-compose command [command arguments]

Commands:

  dory:start
                Start dory reverse proxy

  dory:stop
                Stop dory reverse proxy

  url [service [port]]
                Print url to site or a service

                Protip: run

                  brew install jq

                for improved handling of Traefik host names using jq (https://stedolan.github.io/jq/).

  open [service [port]]
                Open url in default browser

  drush
                Run drush command. If drush in installed via composer,
                the vendor/bin/drush command is run inside the phpfpm
                container. Otherwise, the drush container is used to
                run the command.

  self:update
                Update this script and other stuff.

  sync
                Sync both database and files.

  sync:db
                Sync database base on 'REMOTE_DB_DUMP_CMD' in the env
                file.

                If 'SYNC_DB_POST_SCRIPT' is set, it will be eval'ed after
                importing the remote database.

  sync:files
                Sync files base on 'REMOTE_PATH' or 'LOCAL_PATH' in
                the env file.

  sql:connect
                Print mysql command for connecting to database (named
                `db`) in the database container (`mariadb`).

                Use `$(itkdev-docker-compose sql:connect)` to open the
                database cli.

  sql:log
                Log SQL queries sent to database.

  sql:open
                Open database GUI and connect to MariaDB.

  sql:port
                Display the exposed MariaDB SQL server port.

  template:install name [--force] [--list]
                Install a named docker-composer template in the current
                directory.

  traefik:start
                Start træfik reverse proxy.

  traefik:stop
                Stop træfik reverse proxy

  traefik:url
                URL for the administrative UI for træfik.

  traefik:open
                Open the administrative UI for træfik.

  mail:url
                URL for the test mail web interface.

  mail:open
                Open test mail web interface in default browser.

  mailhog:url
                URL for the mailhog web-interface.

  mailhog:open
                Open mailhog url in default browser

  xdebug
                Boot the containers with PHP xdebug support enabled.

  hosts:insert
                Insert the docker site url into the hosts file.

  images:pull
                Update/pull all docker images.

  shell [service name]
                Enter into /usr/bin/env sh inside container. E.g. itkdev-docker-compose shell phpfpm

  composer
                Run composer command inside phpfpm container

  php
                Run php command inside phpfpm container

  bin/*
  vendor/bin/*
                Run command command inside phpfpm container

  down
                Stop and remove containers, networks, images, and volumes

  version
                Display this tool's current version

  *
                Pass command and arguments to `docker compose` and
                hope for the best.

Configuration:

  The environment variable COMPOSE_PROJECT_NAME must be set in the env file (`.env`).

  These environment variables may be set in the env file:

    COMPOSE_DOMAIN
                The domain to use when generating urls

    REMOTE_HOST
                Host used when pulling data from remove site

    REMOTE_DB_DUMP_CMD
                 Command used to dump database on remote host

    REMOTE_PATH
                File path on remote host

    REMOTE_EXCLUDE
                List of rsync exclude patterns to use when pulling files, e.g.
                REMOTE_EXCLUDE=(ting styles advagg_*)

    LOCAL_PATH
                Local file path

  Local overrides of these variables can be defined in `.env.local` which should
  NOT be commited to Git.

EOF
}

# Start PHP service with Xdebug enabled, wait for kill signal and restart with
# Xdebug disabled.
function xdebug() {
  cat <<'EOF' | sed "s|«project directory»|$PWD|"

================================================================================

Make sure that `PHP_IDE_CONFIG=serverName=localhost` is set in the `phpfpm`
service environment:

# docker-compose.yml
phpfpm:
    image: …
    environment:
      …
      - PHP_IDE_CONFIG=serverName=localhost

# PhpStorm

Open Preferences > PHP > Servers and define "localhost" as a server:

Name: localhost
Host: localhost
Port: 8080
Debugger: Xdebug
Path mapping: «project directory» → /app

You may also want to uncheck "Force break at first line when no path mapping
specified" and/or "Force break at first line when a script is outside the
project" in PhpStorm (Preferences > Languages & Frameworks > PHP > Debug).

# VS Code

Install https://marketplace.visualstudio.com/items?itemName=xdebug.php-debug

Add a configuration in `.vscode/launch.json` with `pathMappings` (Run > Add
Configuration… > "PHP: Listen for Xdebug"):

{
    …
    "configurations": [
        …,
        {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003,
            "pathMappings": {
                "/app": "${workspaceFolder}"
            }
        }
    ]
}

================================================================================

EOF

  echo
  echo "Starting Docker Compose with Xdebug enabled. Press Ctrl-C to disable Xdebug."
  echo

  # Needed to use `trap`
  set +o errexit

  # https://stackoverflow.com/a/11952947
  trap " " INT
  # Start the docker compose with Xdebug enabled
  # @todo Should we disable logs, e.g. by sending it to /dev/null?
  PHP_XDEBUG_MODE=debug PHP_XDEBUG_WITH_REQUEST=yes docker_compose up
  trap - INT

  # Disable Xdebug.
  echo
  echo "Starting Docker Compose with Xdebug disabled."
  echo

  docker_compose up --detach
}

# template:install must be run before we check for existence of compose file.
if [[ "$#" -gt "0" && "$1" == "template:install" ]]; then
  shift
  template_install "$@"
  exit
fi

# self:update must be run before we check for existence of compose file.
if [[ "$#" -gt "0" && "$1" == "self:update" ]]; then
  self_update "$@"
  exit
fi

# Allow traefik:start without existence of .env
if [[ "$#" -gt "0" && "$1" == "traefik:start" ]]; then
  if [ "$(docker inspect -f '{{.State.Running}}' dory_dnsmasq 2>/dev/null)" == "true" ]; then
    (>&2 echo "${bold}Dory reverse proxy should be stopped first. Run itkdev-docker-compose dory:stop.${normal}")
    exit 22;
  fi
  docker network inspect frontend >/dev/null 2>&1 || docker network create --driver=bridge --attachable --internal=false frontend
  $(cd ${script_dir}/../traefik/; docker compose up -d)
  exit
fi

# Allow traefik:stop without existence of .env
if [[ "$#" -gt "0" && "$1" == "traefik:stop" ]]; then
  $(cd ${script_dir}/../traefik/; docker compose down --volumes)
  exit
fi

# Allow dory:start without existence of .env
if [[ "$#" -gt "0" && "$1" == "dory:start" ]]; then
  if [ "$(docker inspect -f '{{.State.Running}}' traefik 2>/dev/null)" == "true" ]; then
    (>&2 echo "${bold}Traefik reverse proxy should be stopped first. Run itkdev-docker-compose traefik:stop.${normal}")
    exit 22;
  fi
  dory up
  exit
fi

# Allow dory:start without existence of .env
if [[ "$#" -gt "0" && "$1" == "dory:stop" ]]; then
  dory down
  exit
fi

# Allow version without existence of compose file.
if [[ "$#" -gt "0" && "$1" == "version" ]]; then
  echo Version: ${VERSION}
  exit
fi

# Allow help without existence of compose file.
if [[ "$#" -gt "0" && "$1" == "--help" ]]; then
  usage
  exit
fi

# @see https://unix.stackexchange.com/questions/13464/is-there-a-way-to-find-a-file-in-an-inverse-recursive-search/13474
upsearch () {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory/$1" && return
    directory="$directory/.."
  done
}

COMPOSE_FILE=${COMPOSE_FILE:-docker-compose.yml}
docker_compose_file=$(upsearch ${COMPOSE_FILE})
if [ -z "$docker_compose_file" ]; then
  (>&2 echo "${bold}Cannot find ${COMPOSE_FILE} file${normal}")
  exit 1
fi

docker_compose_dir=$(cd $(dirname "$docker_compose_file") && pwd)
dot_env_file="$docker_compose_dir/.env"

if [ -z "$dot_env_file" ]; then
  (>&2 echo "${bold}$dot_env_file not found${normal}")
  exit 1
fi

source $dot_env_file
if [ -e $dot_env_file.local ]; then
  source $dot_env_file.local
fi

if [ -z "${COMPOSE_PROJECT_NAME:-}" ]; then
  (>&2 echo "${bold}Environment variable COMPOSE_PROJECT_NAME not defined in $dot_env_file${normal}")
  exit 1
fi

COMPOSE_DOMAIN=${COMPOSE_DOMAIN:-${COMPOSE_PROJECT_NAME}.docker.localhost}

if [ "$#" == "0" ]; then
  usage
  exit 1
fi

# Check if revers proxy is running and print warning if not.
set +o errexit
is_treafik_running=$(docker inspect -f '{{.State.Running}}' traefik 2>/dev/null)
is_dory_running=$(docker inspect -f '{{.State.Running}}' dory_dnsmasq 2>/dev/null)
set -o errexit

if [ ! "$is_treafik_running" == "true" ] && [ ! "$is_dory_running" == "true" ]; then
  (>&2 echo "${bold}Reverse proxy has not been started. Hostname will not be resolved to containers and not all commands will work correctly.${normal}")
fi

# Helper function to call `docker compose` in the right context
docker_compose () {
    # Note: Apparently, using --project-directory or --file options for `docker compose` will break use of `$PWD` in
    # compose file. Therefore, we `cd` before running `docker compose` command.
    (cd "$docker_compose_dir" && COMPOSE_DOMAIN=${COMPOSE_DOMAIN} docker compose "$@")
}

cmd="$1"
shift

case "$cmd" in
  url)
    service=nginx
    port=8080
    if [ "$#" -gt 0 ]; then
      service="$1"

      shift
      if [ "$#" -gt 0 ]; then
        port="$1"
        shift
      fi
    fi

    host=$(docker_compose port $service $port)
    if [ $? -ne 0 ]; then
      exit 1
    elif [ -z "$host" ]; then
      (>&2 echo "Cannot find host for service $service (port: $port)")
      exit 1
    fi

    traefik_host=""
    if command -v jq &> /dev/null; then
      # Get traefik host from label
      # https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)
      # https://stedolan.github.io/jq/manual/#capture(val),capture(regex;flags)
      traefik_host=$(docker inspect --format '{{ json .Config.Labels }}' $(docker_compose ps -q $service) | jq --raw-output '. | [to_entries[] | select(.key | test("^traefik\\.http\\.routers\\..+\\.rule$")) | select(.value | test("^Host\\(`(?<host>.+)`\\)$"))] | first | .value//"" | capture("^Host\\(`(?<host>.+)`\\)$") | .host//""')
    fi

    if ! [ -z "$traefik_host" ]; then
      host="$traefik_host"
    elif [ "nginx" == "$service" ]; then
      # Fall back to using COMPOSE_DOMAIN for nginx container when no Traefik host has been found.
      host=${COMPOSE_DOMAIN}
    fi

    echo http://$host
    ;;

  open)
    open $($script_path url "$@")
    ;;

  sync)
    itkdev-docker-compose sync:db
    itkdev-docker-compose sync:files
    ;;

  sync:db)
    if [ -z "${REMOTE_HOST:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_HOST not defined in $dot_env_file${normal}")
      exit 1
    fi
    if [ -z "${REMOTE_DB_DUMP_CMD:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_DB_DUMP_CMD not defined in $dot_env_file${normal} see readme for more information about this setting")
      exit 1
    fi

    if command -v pv >/dev/null 2>&1; then
      ssh ${REMOTE_HOST} ${REMOTE_DB_DUMP_CMD} | pv | eval $(itkdev-docker-compose sql:connect)
    else
      cat <<EOF
Protip: run

  brew install pv

to show progress
EOF
      ssh ${REMOTE_HOST} ${REMOTE_DB_DUMP_CMD} | eval $(itkdev-docker-compose sql:connect)
    fi

    if [ ! -z "${SYNC_DB_POST_SCRIPT:-}" ]; then
      eval "${SYNC_DB_POST_SCRIPT}"
    fi
    ;;

  sync:files)
    if [ -z "${REMOTE_HOST:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_HOST not defined in $dot_env_file${normal}")
      exit 1
    fi
    if [ -z "${REMOTE_PATH:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_PATH not defined in $dot_env_file${normal}")
      exit 1
    fi
    if [ -z "${LOCAL_PATH:-}" ]; then
      (>&2 echo "${bold}Environment variable LOCAL_PATH not defined in $dot_env_file${normal}")
      exit 1
    fi

    REMOTE_PATH=${REMOTE_PATH%/}
    LOCAL_PATH=${LOCAL_PATH%/}
    excludes=''
    if [ ! -z "${REMOTE_EXCLUDE:-}" ]; then
      for i in "${REMOTE_EXCLUDE[@]}"
      do
        excludes+="--exclude='${i}' "
      done
    fi

    eval rsync -avz ${excludes} ${REMOTE_HOST}:${REMOTE_PATH}/ ${docker_compose_dir}/${LOCAL_PATH}
    ;;

  sql:connect)
    address=$(docker_compose port mariadb 3306)
    host=$(echo $address | cut -d: -f1)
    port=$(echo $address | cut -d: -f2)
    echo mysql --host=$host --port=$port --user=db --password=db db
    ;;

  sql:open)
    address=$(docker_compose port mariadb 3306)
    host=$(echo $address | cut -d: -f1)
    port=$(echo $address | cut -d: -f2)
    echo open mariadb://db:db@$host:$port/db?statusColor=F8F8F8\&enviroment=local\&name=${COMPOSE_DOMAIN}
    open mariadb://db:db@$host:$port/db?statusColor=F8F8F8\&enviroment=local\&name=${COMPOSE_DOMAIN}
    ;;

  sql:port)
    docker_compose port mariadb 3306 | cut -d: -f2
    ;;

  sql:log)

    # @see https://mariadb.com/kb/en/general-query-log/
    # Enable logging to the file mariadb.log (cf. https://mariadb.com/kb/en/general-query-log/#configuring-the-general-query-log-filename)
    docker_compose exec --no-TTY mariadb sh -c 'mysql --user=root --password=$MYSQL_ROOT_PASSWORD db --verbose' <<< "SET GLOBAL general_log=1; SET GLOBAL general_log_file='mariadb.log';"
    echo
    echo "Press Ctrl-C to stop logging"
    echo

    # Needed to use `trap`
    set +o errexit

    # https://stackoverflow.com/a/11952947
    trap " " INT
    docker_compose exec mariadb tail -f /var/lib/mysql/mariadb.log
    trap - INT

    # Disable logging.
    echo
    docker_compose exec --no-TTY mariadb sh -c 'mysql --user=root --password=$MYSQL_ROOT_PASSWORD --verbose db' <<< "SET GLOBAL general_log=0;"
    ;;

  traefik:open)
    open $($script_path traefik:url)
    ;;

  traefik:url)
    label=$(docker inspect --format '{{ index .Config.Labels "traefik.http.routers.traefik.rule"}}' traefik)
    url=$(echo "${label}" | sed -n 's/[^(]*(.\(.*\).)/\1/p')
    echo http://${url}:8080;
    ;;

  mail:url)
    url="http://${COMPOSE_DOMAIN}:$(docker_compose port mail 8025 | cut -d: -f2)"
    echo $url
    ;;

  mail:open)
    open "$(itkdev-docker-compose mail:url)"
    ;;

  mailhog:url)
    echo "Deprecated: Use mail:url"
    url=http://${COMPOSE_DOMAIN}:$(docker_compose port mailhog 8025 | cut -d: -f2)
    echo $url
    ;;

  mailhog:open)
    echo "Deprecated: Use mail:open"
    open $(itkdev-docker-compose mailhog:url)
    ;;

  xdebug)
    xdebug
    ;;

  xdebug3)
    echo
    echo "Deprecated command use xdebug"
    echo

    xdebug
    ;;

  hosts:insert)
    # Remove any existing entry
    sudo sed -i '.itkdev-docker-compose' "/${COMPOSE_DOMAIN}/d" /etc/hosts
    # Append the entry
    echo "0.0.0.0 ${COMPOSE_DOMAIN} # itkdev-docker-compose" | sudo tee -a /etc/hosts
    ;;

  images:pull)
    docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | sort | uniq
    read -p "Are you sure you want to update all images? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | sort | uniq | xargs -L1 docker pull
    fi
    ;;

  drush)
    root=/app
    if [ -d $docker_compose_dir/web ]; then
      root=/app/web
    fi
    if [ -e $docker_compose_dir/vendor/bin/drush ]; then
      docker_compose exec phpfpm /app/vendor/bin/drush --root=$root "$@"
    else
      docker_compose run --rm drush --root=$root "$@"
    fi
    ;;

  composer)
    docker_compose exec phpfpm composer "$@"
    ;;

  php)
    docker_compose exec phpfpm php "$@"
    ;;

  bin/*|vendor/bin/*)
    docker_compose exec phpfpm /app/$cmd "$@"
    ;;

  down)
    docker_compose down --volumes --remove-orphans
    ;;

  shell)
    docker_compose exec "$@" /usr/bin/env sh
    ;;

  *)
    docker_compose "$cmd" "$@"
    ;;
esac
